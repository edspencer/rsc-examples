This example demonstrates how to handle rejected promises in React Server Components using an `ErrorBoundary`. The `getData` function simulates a data fetch that intentionally rejects a promise after a specified delay, which is crucial for testing error handling. The main component, `RejectedPromisePage`, utilizes the `ErrorBoundary` and `Suspense` components to manage the rendering of a table that relies on the promise. When the promise rejects, the `Suspense` fallback is replaced with an `ErrorFallback` component, providing a better user experience by avoiding a full-page error message. This approach highlights the importance of catching errors in asynchronous operations within React applications.